メソッド
    GOにはクラスがないが、構造体に紐づく関数を定義できる
        
        type User struct {
            name string
            age int
        }
        func (user User) getName() string {
            return user.name
        }
        func main() {
            u := User{ name: "taro", age: 19 }
            fmt.Println(u.getName())
        }
    
    とか
    レシーバは同じパッケージで定義した構造体に対して定義できる
    パッケージ外のものには✖
        func (user *User) addAge(age int) {
            user.age += age
        }
    のように型に対するポインタを指定できる
    通常ポインタなしの場合、元の構造体のコピーに対する操作を行う
    一方で、ポインタの場合はその構造体の値そのものを変更する
    なのでセット系の関数はポインタレシーバが必要
    引数の方にポインタをとっても挙動は一緒

インタフェース
    type User interface {
        getName() string
    }
    func main() {
        var ui User
        ui := 構造体
        ui := 構造体のポインタ
    }

    とか
    インタフェースに構造体をかますことで、インタフェースからみた参照だけ有効になる
    構造体側がインタフェースに対応していない場合、代入時にエラー
    特にインプリメント宣言はいらない
    ポインタレシーバがインタフェースの実装の場合、代入時に&構造体変数でポインタを渡す

    インタフェースの実装にnilが渡ってくることはある
    nilに対する実装は、GOの場合それを想定したコードを書くのがふつう？
    そのまま実行すると実行時エラー

    interface{ } は空インタフェース
    空インタフェースは全ての値を受け取れる
    どんな型が入ってくるか想定できない時に使う
    Printfは空インターフェースらしい
    空インターフェースに対して値が入ってきたとき
    その値が必要なものかどうかは下記で確かめる
        var i interface{}
        i = "hello"
        s, ok := i.(string)
        s, ok := i.(int)
        s := i.(int) //パニック
    期待する型ならokにtrue、違う場合はfalse
    sには値が入るが、変数を2つ用意していない場合、かつ値の型が違う場合はパニックが発生する

    スイッチ文を使って特定の型に対する対応ができる
    i.(type)で不特定の型（というか型情報？）を取得できる
        func do( i interface{}) {
            switch v := i.(type) {
            case int:
                intの処理
            case string:
                stringの処理
            default:
                それ以外の処理
            }
        }
    とか
    fmtパッケージのStringerインタフェースはString()関数があることを保証する
    toString()みたいなやつ
    String()関数を構造体に対して定義しとくとprintfとかの出力をいじれる
    fmt.Sprintfで出力と同じ文字列を得られる
    同様にエラー時のメッセージはError()を実装すると変更できる
    エラーハンドリング自体は、関数呼び出しの際にエラー用の変数がnilかどうかをチェックする
        
