
for文
    for i := 0; i < 10; i++ {

    }
    いくつか種類があるが基本的に↑
    forのあとに()がない
    i := 0
    for ; i < 10 ; {
        i++
    }
    初期化と後処理は任意
    ;も省略できる（実質while）
    for {

    }
    で無限ループ
    無限ループはreturnで抜けられる
    forEachもないが下記でかける
    for i, t := range []int{5, 6, 7} {
		fmt.Printf("i=%d, t=%d\n", i, t)
	}

if文
    if x > 0 {

    }
    やっぱり()がない
    if i := 0; x > 10 {

    }
    みたいにif文内で有効な変数を宣言できる
    if文を抜けると参照できないが、elseの中なら参照できる

switch文
    break文がいらない
    文字列での比較も可
    というか式を書ける

    サンプル
	switch os := runtime.GOOS; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.", os)
	}

    下記のような条件のないswitch文はif文と似たような挙動？
    t := time.Now()
	switch {
	case t.Hour() < 12:
		fmt.Println("Good morning!")
	case t.Hour() < 17:
		fmt.Println("Good afternoon.")
	default:
		fmt.Println("Good evening.")
	}

defer
    deferに渡した関数の実行をディレイさせる
    deferに渡した関数の引数式はすぐに評価されるが、
    式自体の実行はdeferを定義した関数の終了まで実行されない（return時）
	defer fmt.Println("world")
    fmt.Println("hello")
    がhello worldになる

    deferを複数回呼んだ場合、deferにたまった関数の考え方はスタック（LIFO)
	for i := 0; i < 10; i++ {
		defer fmt.Println(i)
	}
	fmt.Println("done")
    done 9 8 7 ・・・
    で出力される
    


