ゴール―チン
    GOのランタイムに管理される軽量のスレッド
    go f(x,y,z)
    で新しいスレッドができる
    f,x,y,zの評価は元のスレッドで行われ、
    fの実行は新しいスレッドで行われる
    
    ゴールーチンは同じアドレス空間で実行されるので、共有メモリへのアクセスは同期させる必要がある

    Channel
        チャネルオペレータ　<- を使ってスレッド間で通信できる
            ch <- v //vをchに送る
            v := <- ch //chからもらった値で変数vを作る
        とか
        	s := []int{7, 2, 8, -9, 4, 0}
            c := make(chan int)
            go sum(s[:len(s)/2], c)
            go sum(s[len(s)/2:], c)
            x, y := <-c, <-c // receive from c
            fmt.Println(x, y, x+y)
        とか

        make(chan int)
        とかで何の型のチャネルを作るか定義する
        通常双方が準備できるまで通信はブロックされるので、明確な同期定義は必要ない

        チャネルはバッファとして利用できる
        make(chan int, 10) //第2引数はバッファ
        キューっぽい挙動？
            ch := make(chan int,4)
            ch <- 1
            ch <- 2
            ch <- 3
            ch <- 4
            fmt.Println(<-ch) //1
            fmt.Println(<-ch) //2
            fmt.Println(<-ch) //3
            fmt.Println(<-ch) //4
        バッファサイズを超えてチャネルにデータを入れるとエラー？
        チャネルサイズを超えてチャネルへのプッシュはブロックされる
        空のチャネルから受信はブロックされる
        チャネルのバッファはcap(ch)
        c := range ch でチャネルの値をforで受けたりできる
        
            c := make(chan int, 10)
            go fibonacci(cap(c), c)
            go fibonacci(cap(c), c)
            for i := range c {
                fmt.Println(i)
            }
        同じチャネルを使いまわすとそれぞれ別のチャネルとして動作してるっぽい
        上の記述だと20回の出力がある
        for i := range c 
        のところで明確に別スレッドがクローズするのをまってるように思う
        上記で呼び出し先のfibonacci関数がチャネルをクローズしないとforの最後でエラー
        クローズの実行はclose(ch)
        クローズの確認は v,ok := <-ch
        クローズしてかつ受信する値がないとき、okはfalseになる
        クローズは送り手からするべきで受けてはしてはいけない
        チャネルは基本closeは必要なない
        rangeとか使ってる場合で受け手が送り手のクローズを知りたいときだけ使う

        Select
            複数の通信操作の切り分けに使う
            準備出来ているcaseブロックを実行する
            複数のcaseが準備出来ている場合はランダムに実行
                select {
                case c <- x:
                    x, y = y, x+y
                case <-quit:
                    fmt.Println("quit")
                    return
                }
            どのチャネルも準備できていない時はdefaultが呼ばれる

        排他処理
            sync.MutexとLock、Unlockを使う
            細かい使い方は別途






